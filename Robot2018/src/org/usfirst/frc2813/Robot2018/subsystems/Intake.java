// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2813.Robot2018.subsystems;

import java.util.HashMap;

import org.usfirst.frc2813.Robot2018.Direction;
import org.usfirst.frc2813.Robot2018.RobotMap;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.SpeedController;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */

public class Intake extends Subsystem {
	/*
	 * Constants used by the Intake code
	 */
	public static Direction intakeDirection;
	public static HashMap<Direction, Integer> multipliers = new HashMap<Direction, Integer>();//TODO Is This code good? -Adrian
	static {
		multipliers.put(Direction.IN, -1);
		multipliers.put(Direction.OUT, 1);
	}
	// public static final int INTAKE_DIRECTION_MULTIPLIER_IN = -1;
	// public static final int INTAKE_DIRECTION_MULTIPLIER_OUT = 1;
	public static HashMap<Direction, Double> speeds = new HashMap<Direction, Double>();
	static {
		speeds.put(Direction.IN, 0.7);
		speeds.put(Direction.OUT, 0.7);
	}
	// public static final double INTAKE_SPEED_IN = 0.7;
	// public static final double INTAKE_SPEED_OUT = 0.7;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public final SpeedController speedController = RobotMap.intakeSpeedController;

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		// setDefaultCommand(new SpinIntake());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void spinDrive() {

	}

	@Override
	public void periodic() {
		// Put code here to be run every loop

	}

	/**
	 * Spin the intake wheels at a set speed
	 * 
	 */
	public void spin(Direction spinDirection) {
		speedController.set(multipliers.get(spinDirection) * speeds.get(spinDirection)); // NOTE: 2nd speed controller is slaved to this one in RobotMap
	}
	// Put methods for controlling this subsystem
	// here. Call these from Commands.

}
