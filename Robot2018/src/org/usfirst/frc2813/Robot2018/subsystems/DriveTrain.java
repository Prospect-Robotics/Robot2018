// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2813.Robot2018.subsystems;

import org.usfirst.frc2813.Robot2018.Robot;
import org.usfirst.frc2813.Robot2018.RobotMap;
import org.usfirst.frc2813.Robot2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveTrain extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public final SpeedController speedController1 = RobotMap.driveTrainSpeedController1;
	public final SpeedController speedController2 = RobotMap.driveTrainSpeedController2;
	// private final SpeedController speedController3 =
	// RobotMap.driveTrainSpeedController3;
	// private final SpeedController speedController4 =
	// RobotMap.driveTrainSpeedController4;
	private final DifferentialDrive robotDrive = RobotMap.driveTrainRobotDrive;
	public final Encoder quadratureEncoder1 = RobotMap.driveTrainQuadratureEncoder1;
	public final Encoder quadratureEncoder2 = RobotMap.driveTrainQuadratureEncoder2;
	// private final Encoder quadratureEncoder3 =
	// RobotMap.driveTrainQuadratureEncoder4;
	public final Solenoid gearShift = RobotMap.driveTrainSolenoid1;

	// private final Encoder quadratureEncoder4 =
	// RobotMap.driveTrainQuadrature
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public DriveTrain() {
		addChild(robotDrive);
		addChild((Sendable) speedController1);
		LiveWindow.add((Sendable) speedController1);
		addChild((Sendable) speedController2);
		LiveWindow.add((Sendable) speedController2);
	}

	// @Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		setDefaultCommand(new OIDrive());
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop

	}

	public void arcadeDrive(Joystick joystick1, Joystick joystickIgnored) {// defines arcadeDrive for OI
		double z = joystick1.getX() + joystick1.getTwist();
		double x = joystick1.getY();
		if (Math.abs(joystick1.getY()) > .7 && gearShift.get() == false) {
			new ShiftGears();
		}
		else if (Math.abs(joystick1.getY()) <= .7 && gearShift.get()==true) {
			new ShiftGears();
		}
		robotDrive.arcadeDrive(joystick1.getY(), -joystick1.getX()*Math.abs(joystick1.getX()), false);
	}


	public void tankAutoDrive(double speedLeft, double speedRight) {
		//double z = x + rotate;
		Robot.driveTrain.speedController1.set(-speedLeft);
		Robot.driveTrain.speedController2.set(speedRight);
		//robotDrive.arcadeDrive(-y, rotate, false);// TODO check math
	}
	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void tankDrive(Joystick joystick1, Joystick joystick2) {// defines tankDrive
		robotDrive.tankDrive(-joystick1.getY() * Math.abs(joystick1.getY()),
				-joystick2.getY() * Math.abs(joystick2.getY()));
	}
<<<<<<< HEAD

	public void arcadeDrive(double forwardSpeed, double turnSpeed) {
		robotDrive.arcadeDrive(forwardSpeed, turnSpeed, false); // false here means do not square the inputs (if omitted, the argument defaults to true)
=======
	
	public void arcadeDrive(double forwardSpeed, double turnSpeed) {
		 robotDrive.arcadeDrive(forwardSpeed, turnSpeed, false); // false here means do not square the inputs (if omitted, the argument defaults to true)
>>>>>>> branch 'Grady' of https://github.com/Prospect-Robotics/Robot2018
	}
}