// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2813.Robot2018.subsystems;

import org.usfirst.frc2813.Robot2018.RobotMap;
import org.usfirst.frc2813.Robot2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.command.TimedCommand;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.SpeedController;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public final SpeedController speedController = RobotMap.elevatorSpeedControllerPort;
    public final Encoder encoder = RobotMap.elevatorQuadratureEncoder1;
    public final DigitalInput limitSwitch = RobotMap.elevatorLimitSwitch;
    // last argument speedController = normal operation, last argument this::debugPrintPIDOutput = debug mode.
    //public final PIDController controller = new PIDController(1.0, 0, 0, encoder, this::debugPrintPIDOutput);	// Kp, Ki, Kd
    public boolean encoderFunctional;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public void debugPrintPIDOutput(double pidOutput) {
		System.out.println("Output updated to: "+pidOutput);
		speedController.pidWrite(pidOutput);
	}
    
    @Override
    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        setDefaultCommand(new MaintainElevatorPosition());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	if(getCurrentCommand() == null) {
    		new MaintainElevatorPosition().start();
    	}
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

