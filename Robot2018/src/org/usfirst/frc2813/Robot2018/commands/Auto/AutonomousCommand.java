// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2813.Robot2018.commands.Auto;

import org.usfirst.frc2813.Robot2018.commands.DriveTrain.ResetEncoders;
import org.usfirst.frc2813.Robot2018.commands.DriveTrain.ResetGyro;
import org.usfirst.frc2813.Robot2018.commands.Arm.SpinIntake;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.TimedCommand;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * Generate a series of sequential commands to operate autonomously. Takes into
 * account game data.
 */
public class AutonomousCommand extends CommandGroup {
	private static enum FieldPosition {
		LEFT, CENTER, RIGHT
	}
	private static final double ONE_INCH = 1;			//  The Encoder code in WPI Lib translates the distance to inches based on the
	private static final double ONE_FOOT = 12 * ONE_INCH;
	private int directionBias;  // used to share code between left/right
	private static final SendableChooser<Integer> positionSelector = new SendableChooser<Integer>();
	static {
		positionSelector.addDefault("LEFT", 0);
		positionSelector.addObject("CENTER", 1);
		positionSelector.addObject("RIGHT", 2);
		SmartDashboard.putData("Which position is the robot in?", positionSelector);
	}
	/**
	 * Code to be run during the Autonomous 15 second period. 
	 * This code uses the gameData from the driver station and a 
	 * sendable chooser on the Smart Dashboard to decide which
	 * sequence to run.
	 */
	public AutonomousCommand() {
		/**
		 * The game data from the driver station:
		 * Which side of the near switch, scale,
		 * and far switch we have.
		 */
		class GameData {
			// Class to take a gameData sequence such as "RLR" and split into 3 enum values
			private FieldPosition nearSwitch, scale, farSwitch;
			private FieldPosition splitChar(char c) {
				return (c == 'L') ? FieldPosition.LEFT : FieldPosition.RIGHT;
			}
			GameData(String gd) {
				nearSwitch = splitChar(gd.charAt(0));
				scale = splitChar(gd.charAt(1));
				farSwitch = splitChar(gd.charAt(2));
			}
			public FieldPosition getNearSwitch() { return nearSwitch; }
			public FieldPosition getScale() { return scale; }
			public FieldPosition getFarSwitch() { return farSwitch; }
		}
		/**
		 * The movement commands used in the sequences
		 */
		class AutoCmd {
			private static final int FORWARD = -1;
			private static final int BACKWARD = 1;
			private double driveSpeed = 1;
			private double turnSpeed = 0.25;
			private double curveSpeed = 0.4;
			private static final int MAX_ELEVATOR = 0;//TODO replace with correct value

			//robot driving commands
			public AutoCmd() {
				addSequential(new ResetEncoders());
				addSequential(new ResetGyro());
			}
			public void setDriveSpeed(double speed) { driveSpeed=speed; }
			public void setTurnSpeed(double speed) { turnSpeed=speed; }

	    	/*
	    	 * A note on Encoders and the sign of distance:
	    	 * Encoders will decrement when the roll backwards.  Therefore, if you want the robot to travel backwards during autonomous,
	    	 * you must set BOTH the speed and the distance to a negative value (multiply by "BACKWARDS"
	    	 */
			public void driveForward(double distance) {
				System.out.println("DRIVEFORWARD");
				addSequential(new PIDAutoDrive(FORWARD*driveSpeed, distance));
			}
			public void driveBackward(double distance) {
				addSequential(new PIDAutoDrive(BACKWARD*driveSpeed, distance));
			}

			public void turnLeft(double angle) {
				addSequential(new AutoTurn(turnSpeed, angle));
			}
			public void turnLeft() { turnLeft(90); } // Default turns are 90 degree
			public void turnRight(double angle) { turnLeft(-angle); } // right turn is a negative left turn
			public void turnRight() { turnLeft(-90); }

			public void curveCounterForward(double angle, double radius) {
				addSequential(new AutoCurveDrive(-curveSpeed, -angle, radius));
			}
			public void curveClockForward(double angle, double radius) {
				addSequential(new AutoCurveDrive(curveSpeed, angle, -radius));
			}
			public void curveCounterBackward(double angle, double radius) {
				addSequential(new AutoCurveDrive(curveSpeed, -angle, radius));
			}
			public void curveClockBackward(double angle, double radius) {
				addSequential(new AutoCurveDrive(-curveSpeed, angle, -radius));
			}

			//elevator commands
			public void raiseElevator(double amount) {
				//TODO create method //addSequential();
			}
			public void raiseElevator() { raiseElevator(MAX_ELEVATOR); }
			public void lowerElevator(double amount) { raiseElevator(-amount); }
			public void lowerElevator() { raiseElevator(-MAX_ELEVATOR); }

			// arm control commands
			public void dropCube() {
				// TODO: add command to close arms
				addSequential(new SpinIntake(false, true));
			}
			public void grabCube() {
				// TODO: add command to open arms
				addSequential(new SpinIntake(true, false));
			}

			public void sleep(double seconds) {
				addSequential(new TimedCommand(seconds));
			}
		}
		AutoCmd cmdIssuer = new AutoCmd();
		GameData gameData = new GameData(DriverStation.getInstance().getGameSpecificMessage());
		FieldPosition position = FieldPosition.values()[positionSelector.getSelected()];

		 // allows left->right and right->left to share code
		directionBias = (position == FieldPosition.LEFT) ? 1 : -1;

		if (position == gameData.getScale()) {
			// we are on the same side as the scale. Leave switch for team mates
			cmdIssuer.driveForward(150);
			cmdIssuer.turnRight(90 * directionBias);
			cmdIssuer.raiseElevator();
			cmdIssuer.dropCube();
			cmdIssuer.lowerElevator();
		}
		else if (position != FieldPosition.CENTER) {
			// from far side we cross over between switch and scale and place block on scale
			cmdIssuer.driveForward(50);
			cmdIssuer.turnRight(45 * directionBias);
			cmdIssuer.driveForward(50); // diagonally across field
			cmdIssuer.turnLeft(45 * directionBias);
			cmdIssuer.raiseElevator();
			cmdIssuer.dropCube();
			cmdIssuer.lowerElevator();			
		}
		else {
			// We are in the center start position
			 // allows left->right and right->left to share code
			directionBias = (position == FieldPosition.LEFT) ? 1 : -1;

			cmdIssuer.driveForward(10); // enough to turn
			cmdIssuer.turnLeft(45 * directionBias);
			cmdIssuer.driveForward(40); // diagonally from start to far side of near switch
			cmdIssuer.turnRight(45);
			cmdIssuer.raiseElevator(AutoCmd.MAX_ELEVATOR / 2);
			cmdIssuer.dropCube();
			cmdIssuer.lowerElevator();			
		}
	}
}