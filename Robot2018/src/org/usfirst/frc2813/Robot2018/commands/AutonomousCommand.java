// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2813.Robot2018.commands;

import org.usfirst.frc2813.Robot2018.RobotMap;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.TimedCommand;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class AutonomousCommand extends CommandGroup {

	private static final SendableChooser<Integer> positionSelector = new SendableChooser<Integer>();
	public static final int FORWARD_SPEED_x_percent_power = -1;
	public static final int BACKWARD_SPEED_x_percent_power = 1;
	public static final int FORWARD_DISTANCE = 1;
	public static final int BACKWARD_DISTANCE = 1;
	public static final double ONE_INCH = 1;			//  The Encoder code in WPI Lib translates the distance to inches based on the
														//  
	public static final double ONE_FOOT = 12 * ONE_INCH;
	
	static {
		positionSelector.addDefault("LEFT", 0);
		positionSelector.addObject("CENTER", 1);
		positionSelector.addObject("RIGHT", 2);
		SmartDashboard.putData("Which position is the robot in?", positionSelector);
	}
	
	
	
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
	public AutonomousCommand() {
		class autoCmd {
			private static final int FORWARD = -1;
			private static final int BACKWARD = 1;
			private double driveSpeed = 1;
			private double turnSpeed = 0.25;
			private double curveSpeed = 0.4;
			private static final int MAX_ELEVATOR = 0;//TODO replace with correct value
			
			//robot driving commands
			public autoCmd() {
				addSequential(new ResetEncoders());
				addSequential(new ResetGyro());
			}
			public void setDriveSpeed(double speed) {
				driveSpeed=speed;
			}
			public void setTurnSpeed(double speed) {
				turnSpeed=speed;
			}
			public void driveForward(double distance) {
				System.out.println("DRIVEFORWARD");
				addSequential(new PIDAutoDrive(FORWARD*driveSpeed, distance));
			}
			public void driveBackward(double distance) {
				addSequential(new PIDAutoDrive(BACKWARD*driveSpeed, distance));
			}
			public void turnLeft() {
				addSequential(new AutoTurn(turnSpeed, 90));
			}
			public void turnLeft(double angle) {
				addSequential(new AutoTurn(turnSpeed, angle));
			}
			public void turnRight() {
				turnLeft(-90);
			}
			public void turnRight(double angle) {
				turnLeft(-angle);
			}
			public void curveCounterForward(double angle, double radius) {
				addSequential(new AutoCurveDrive(-curveSpeed, -angle, radius));
			}
			public void curveClockForward(double angle, double radius) {
				addSequential(new AutoCurveDrive(curveSpeed, angle, -radius));
			}
			public void curveCounterBackward(double angle, double radius) {
				addSequential(new AutoCurveDrive(curveSpeed, -angle, radius));
			}
			public void curveClockBackward(double angle, double radius) {
				addSequential(new AutoCurveDrive(-curveSpeed, angle, -radius));
			}
			
			//elevator commands
			public void raiseElevator() {
				//TODO create method //addSequential();
			}
			public void raiseElevator(double amount) {
				//TODO create method //addSequential();
			}
			public void lowerElevator() {
				raiseElevator(-MAX_ELEVATOR);
			}
			public void lowerElevator(double amount) {
				raiseElevator(-amount);
			}
			public void placeCube() {
				//TODO addSequential(s) to place cube
			}
		}
		autoCmd cmdIssuer = new autoCmd();
		final String gameData = DriverStation.getInstance().getGameSpecificMessage();
		int position = positionSelector.getSelected();
		switch (position) {
		case 0://POSITION LEFT
			switch(gameData) {
			case "LLL":
				
				cmdIssuer.driveForward(150);
				//cmdIssuer.curveClockForward(30, .7);
				
				break;
			case "RLR":
				break;
			case "LRL":
				break;
			case "RRR":
				break;
			}
			break;
		case 1://POSITION CENTER
			switch(gameData.charAt(0)) {
			case 'L':
				break;
			case 'R':
				
				cmdIssuer.driveForward(20);
				cmdIssuer.curveClockForward(45, .7);
				cmdIssuer.driveForward(20);
				cmdIssuer.curveCounterForward(50, .7);
				cmdIssuer.driveForward(15);
				//TODO RELEASE CUBE; might want to raise elevator...
				addSequential(new TimedCommand(2));
				cmdIssuer.curveClockBackward(90, .6);
				cmdIssuer.curveCounterBackward(68, .5);
				cmdIssuer.driveForward(12);
				break;
				
			}
			break;
		case 2://POSITION RIGHT
			switch(gameData) {
			case "LLL":
				break;
			case "RLR":
				break;
			case "LRL":
				break;
			case "RRR":
				break;
			}
			break;
		}
		System.out.println("AutonomousCommand:  Wheel circumference is "+RobotMap.WHEEL_CIRCUMFERENCE);
		// Robot.driveTrain.quadratureEncoder1.reset();
		// Robot.driveTrain.quadratureEncoder2.reset();
		addSequential(new ResetEncoders());
		addSequential(new ResetGyro());

    	/*
    	 * A note on Encoders and the sign of distance:
    	 * Encoders will decrement when the roll backwards.  Therefore, if you want the robot to travel backwards during autonomous,
    	 * you must set BOTH the speed and the distance to a negative value (multiply by "BACKWARDS"
    	 */
		
		//addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.75, FORWARD_DISTANCE * 10 * ONE_FOOT));				// drive at % of max speed some distance
		//addSequential(new PIDAutoDrive( BACKWARD_SPEED_x_percent_power * 0.75, BACKWARD_DISTANCE * 10 * ONE_FOOT));	// drive at % of max speed some distance
		//  This code makes the robot drive backwards, but it doesn't stop...  FLAG  - fix this!
//		addSequential(new PIDAutoDrive(BACKWARD_x_PERCENT_POWER * 0.2, 6 * ONE_FOOT));	// drive back the same distance - are we where we started?
		// addSequential(new
		// PrintOutEncoderValues(60,Robot.driveTrain.quadratureEncoder1,Robot.driveTrain.quadratureEncoder2));
		// addSequential(new AutoTurn(0.1,180));
		/*
		 * From here down is for choosing Auto program There are 10 possibilities
		 */

		//final String gameData = DriverStation.getInstance().getGameSpecificMessage();
		//int position = positionSelector.getSelected();
		/*switch (position) {
		case 0://POSITION LEFT
			switch(gameData) {
			case "LLL":
			case "RLR":
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 324));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(0.25, 90));//plz dont neglect autoturn
				//raise elevator
				//angrily throw cube
				//lower eleavtor
				addSequential(new AutoTurn(0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 128));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				/*addSequential(new AutoTurn(-0.25, 90));
				//move to first cube dist
				//move to first cube dist(backwards)
				addSequential(new AutoTurn(-0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 128));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(0.25, 90));//plz dont neglect autoturn
				//raise elevator
				//angrily throw cube
				//lower elevator
				addSequential(new AutoTurn(0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 128));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(-0.25, 90));
				break;
			case "LRL":
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 168));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(0.25, 90));
				//raise elevator to <SWITCH_LEVEL>(make this constant)
				//angrily throw cube
				//lower elevator
				addSequential(new AutoTurn(-0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 52));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(0.25, 90));
				//moveforward some distance
				addSequential(new AutoTurn(0.25, 90));
				//forward to cube
				//grab cube
				addSequential(new AutoTurn(-0.25, 180));
				//forward away some distance figure it out
				addSequential(new AutoTurn(0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 150));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(-0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 128));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(-0.25, 90));
				//raise elevator
				//angrily throw cube
				//lower elevator
				break;
			case "RRR":
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 229));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 264));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(-0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 128));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(-0.25, 90));
				//raise elevator
				//angrily throw cube
				//lower elevator
				break;
			}
			break;
		case 1://POSITION CENTER
			switch (gameData.charAt(0)) {
			case 'L':
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 1, FORWARD_DISTANCE * 20));
				addSequential(new AutoCurveDrive(-0.4, -65, .7));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 1, FORWARD_DISTANCE * 8));
				addSequential(new AutoCurveDrive(0.4, 45, -.7));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 1, FORWARD_DISTANCE * 18));
				//TODO RELEASE CUBE; might want to raise elevator...
				addSequential(new TimedCommand(1));
				addSequential(new AutoTurn(0.4,60));
				
				break;
			}
			break;
		case 2://POSITION RIGHT
			switch(gameData) {
			case "LLL":
			case "RLR":
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 324));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(0.25, -90));//plz dont neglect autoturn
				//raise elevator
				//angrily throw cube
				//lower eleavtor
				addSequential(new AutoTurn(0.25, -90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 128));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				/*addSequential(new AutoTurn(0.25, 90));
				//move to first cube dist
				//move to first cube dist(backwards)
				addSequential(new AutoTurn(0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 128));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(-0.25, 90));//plz dont neglect autoturn
				//raise elevator
				//angrily throw cube
				//lower elevator
				addSequential(new AutoTurn(-0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 128));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(0.25, 90));
				break;
			case "LRL":
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 168));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(-0.25, 90));
				//raise elevator to <SWITCH_LEVEL>(make this constant)
				//angrily throw cube
				//lower elevator
				addSequential(new AutoTurn(0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 52));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(-0.25, 90));
				//moveforward some distance
				addSequential(new AutoTurn(-0.25, 90));
				//forward to cube
				//grab cube
				addSequential(new AutoTurn(0.25, 180));
				//forward away some distance figure it out
				addSequential(new AutoTurn(-0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 150));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 128));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(0.25, 90));
				//raise elevator
				//angrily throw cube
				//lower elevator
				break;
			case "RRR":
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 229));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(-0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 264));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(0.25, 90));
				addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.5, FORWARD_DISTANCE * 128));//distance is not accurate, GIVE US MEASUREMENTS GODDAMNIT
				addSequential(new AutoTurn(0.25, 90));
				//raise elevator
				//angrily throw cube
				
				//lower elevator
				break;
			}
			break;
		}*/

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
		// Add Commands here:
		// e.g. addSequential(new Command1());
		// addSequential(new Command2());
		// these will run in order.

		// To run multiple commands at the same time,
		// use addParallel()
		// e.g. addParallel(new Command1());
		// addSequential(new Command2());
		// Command1 and Command2 will run in parallel.

		// A command group will require all of the subsystems that each member
		// would require.
		// e.g. if Command1 requires chassis, and Command2 requires arm,
		// a CommandGroup containing them would require both the chassis and the
		// arm.
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

	}
}
