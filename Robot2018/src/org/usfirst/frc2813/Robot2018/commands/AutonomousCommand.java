// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2813.Robot2018.commands;

import org.usfirst.frc2813.Robot2018.RobotMap;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.TimedCommand;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class AutonomousCommand extends CommandGroup {

	private static final SendableChooser<Integer> positionSelector = new SendableChooser<Integer>();
	public static enum FieldPosition { LEFT, CENTER, RIGHT };
	
	public static final double ONE_INCH = 1;			//  The Encoder code in WPI Lib translates the distance to inches based on the
														//  
	public static final double ONE_FOOT = 12 * ONE_INCH;
	
	static {
		positionSelector.addDefault("LEFT", 0);
		positionSelector.addObject("CENTER", 1);
		positionSelector.addObject("RIGHT", 2);
		SmartDashboard.putData("Which position is the robot in?", positionSelector);
	}
	
	
	
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
	public AutonomousCommand() {
		class GameData {
			// Class to take a gameData sequence such as "RLR" and split into 3 enum values
			public FieldPosition nearSwitch, scale, farSwitch;
			private FieldPosition splitChar(char c) {
				return (c == 'L') ? FieldPosition.LEFT : FieldPosition.RIGHT;
			}
			GameData(String gd) {
				nearSwitch = splitChar(gd.charAt(0));
				scale = splitChar(gd.charAt(1));
				farSwitch = splitChar(gd.charAt(2));
			}
		}
		class AutoCmd {
			/*
			 * autoCmd performs autonomous movement and elevator commands
			 */
			private static final int FORWARD = -1;
			private static final int BACKWARD = 1;
			private double driveSpeed = 1;
			private double turnSpeed = 0.25;
			private double curveSpeed = 0.4;
			private static final int MAX_ELEVATOR = 0;//TODO replace with correct value
			
			//robot driving commands
			public AutoCmd() {
				addSequential(new ResetEncoders());
				addSequential(new ResetGyro());
			}
			public void setDriveSpeed(double speed) {
				driveSpeed=speed;
			}
			public void setTurnSpeed(double speed) {
				turnSpeed=speed;
			}
			public void driveForward(double distance) {
				System.out.println("DRIVEFORWARD");
				addSequential(new PIDAutoDrive(FORWARD*driveSpeed, distance));
			}
			public void driveBackward(double distance) {
				addSequential(new PIDAutoDrive(BACKWARD*driveSpeed, distance));
			}
			public void turnLeft() {
				turnLeft(90);
			}
			public void turnLeft(double angle) {
				addSequential(new AutoTurn(turnSpeed, angle));
			}
			public void turnRight() {
				turnLeft(-90);
			}
			public void turnRight(double angle) {
				turnLeft(-angle);
			}
			public void curveCounterForward(double angle, double radius) {
				addSequential(new AutoCurveDrive(-curveSpeed, -angle, radius));
			}
			public void curveClockForward(double angle, double radius) {
				addSequential(new AutoCurveDrive(curveSpeed, angle, -radius));
			}
			public void curveCounterBackward(double angle, double radius) {
				addSequential(new AutoCurveDrive(curveSpeed, -angle, radius));
			}
			public void curveClockBackward(double angle, double radius) {
				addSequential(new AutoCurveDrive(-curveSpeed, angle, -radius));
			}
			
			//elevator commands
			public void raiseElevator() {
				//TODO create method //addSequential();
			}
			public void raiseElevator(double amount) {
				//TODO create method //addSequential();
			}
			public void lowerElevator() {
				raiseElevator(-MAX_ELEVATOR);
			}
			public void lowerElevator(double amount) {
				raiseElevator(-amount);
			}
			public void placeCube() {
				//TODO addSequential(s) to place cube
			}
			public void sleep(double seconds) {
				addSequential(new TimedCommand(seconds));
			}
		}
		AutoCmd cmdIssuer = new AutoCmd();
		GameData gameData = new GameData(DriverStation.getInstance().getGameSpecificMessage());
		FieldPosition position = FieldPosition.values()[positionSelector.getSelected()];
		if (position == gameData.scale) {
			// we are on the same side as the scale. Leave switch for team mates
			cmdIssuer.driveForward(150);
			if (position == FieldPosition.LEFT) {
				cmdIssuer.turnRight();
			}
			else {
				cmdIssuer.turnLeft();
			}
			cmdIssuer.raiseElevator();
			cmdIssuer.placeCube();
			cmdIssuer.lowerElevator();
		}
		else if (position != FieldPosition.CENTER) {
			// from far side we cross over between switch and scale and place block on scale
			cmdIssuer.driveForward(50);
			if (position == FieldPosition.LEFT) {
				cmdIssuer.turnRight(45);
			}
			else {
				cmdIssuer.turnLeft(45);
			}
			cmdIssuer.driveForward(50); // diagonally across field
			if (position == FieldPosition.LEFT) {
				cmdIssuer.turnLeft(45);
			}
			else {
				cmdIssuer.turnRight(45);
			}
			cmdIssuer.raiseElevator();
			cmdIssuer.placeCube();
			cmdIssuer.lowerElevator();			
		}
		else {
			// We are in the center start position
			cmdIssuer.driveForward(10); // enough to turn
			if (gameData.nearSwitch == FieldPosition.LEFT) {
				cmdIssuer.turnLeft(45);
				cmdIssuer.driveForward(40); // diagonally from start to far side of near switch
				cmdIssuer.turnRight(45);
			}
			else if (gameData.nearSwitch == FieldPosition.RIGHT) {
				cmdIssuer.turnRight(45);
				cmdIssuer.driveForward(40); // diagonally from start to far side of near switch
				cmdIssuer.turnLeft(45);
			}
			cmdIssuer.raiseElevator(AutoCmd.MAX_ELEVATOR / 2);
			cmdIssuer.placeCube();
			cmdIssuer.lowerElevator();			
		}
//				cmdIssuer.driveForward(20);
//				cmdIssuer.curveClockForward(45, .7);
//				cmdIssuer.driveForward(20);
//				cmdIssuer.curveCounterForward(50, .7);
//				cmdIssuer.driveForward(15);
//				cmdIssuer.raiseElevator();
//				cmdIssuer.placeCube();
//				cmdIssuer.lowerElevator();
//				cmdIssuer.sleep(2);
//				cmdIssuer.curveClockBackward(90, .6);
//				cmdIssuer.curveCounterBackward(68, .5);
//				cmdIssuer.driveForward(12);
		}
		/*System.out.println("AutonomousCommand:  Wheel circumference is "+RobotMap.WHEEL_CIRCUMFERENCE);
		// Robot.driveTrain.quadratureEncoder1.reset();
		// Robot.driveTrain.quadratureEncoder2.reset();

    	/*
    	 * A note on Encoders and the sign of distance:
    	 * Encoders will decrement when the roll backwards.  Therefore, if you want the robot to travel backwards during autonomous,
    	 * you must set BOTH the speed and the distance to a negative value (multiply by "BACKWARDS"
    	 */
		
		//addSequential(new PIDAutoDrive( FORWARD_SPEED_x_percent_power * 0.75, FORWARD_DISTANCE * 10 * ONE_FOOT));				// drive at % of max speed some distance
		//addSequential(new PIDAutoDrive( BACKWARD_SPEED_x_percent_power * 0.75, BACKWARD_DISTANCE * 10 * ONE_FOOT));	// drive at % of max speed some distance
		//  This code makes the robot drive backwards, but it doesn't stop...  FLAG  - fix this!
//		addSequential(new PIDAutoDrive(BACKWARD_x_PERCENT_POWER * 0.2, 6 * ONE_FOOT));	// drive back the same distance - are we where we started?
		// addSequential(new
		// PrintOutEncoderValues(60,Robot.driveTrain.quadratureEncoder1,Robot.driveTrain.quadratureEncoder2));
		// addSequential(new AutoTurn(0.1,180));
		/*
		 * From here down is for choosing Auto program There are 10 possibilities
		 */

		//final String gameData = DriverStation.getInstance().getGameSpecificMessage();
		//int position = positionSelector.getSelected();

}