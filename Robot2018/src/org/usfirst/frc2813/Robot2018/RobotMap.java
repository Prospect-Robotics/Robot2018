// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2813.Robot2018;

import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
//import edu.wpi.first.wpilibj.WPI_VictorSPX;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_VictorSPX driveTrainSpeedController1;
    public static WPI_VictorSPX driveTrainSpeedController2;
    //public static SpeedController driveTrainSpeedController3;
    //public static SpeedController driveTrainSpeedController4;
    public static DifferentialDrive driveTrainRobotDrive;
    public static Encoder driveTrainQuadratureEncoder1;
    public static Encoder driveTrainQuadratureEncoder2;
    //public static Encoder driveTrainQuadratureEncoder3;
    //public static Encoder driveTrainQuadratureEncoder4;
    public static Solenoid driveTrainSolenoid1;
    public static SpeedController elevatorSpeedController1;
    public static SpeedController intakeSpeedController1;
    public static Encoder elevatorQuadratureEncoder1;
    public static DigitalInput elevatorDigitalInput1;
    public static Relay relay0;
    public static Relay relay1;
    public static Relay relay2;
    public static boolean relay0on;
    public static boolean relay1on;
    public static boolean relay2on;
    private static final double WHEEL_DIAMETER=4;
    public static final double WHEEL_CIRCUMFERENCE=Math.PI*WHEEL_DIAMETER;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @SuppressWarnings("deprecation")
	public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainSpeedController1 = new WPI_VictorSPX(1);
        driveTrainSpeedController1.setName("DriveTrain", "Speed Controller 1");
        driveTrainSpeedController1.setInverted(false);
        driveTrainSpeedController2 = new WPI_VictorSPX(2);
        driveTrainSpeedController2.setName("DriveTrain", "Speed Controller 2");
        driveTrainSpeedController2.setInverted(false);
        //driveTrainSpeedController3 = new PWMVictorSPX(2);
        //LiveWindow.addActuator("DriveTrain", "Speed Controller 3", (PWMVictorSPX) driveTrainSpeedController3);
        //driveTrainSpeedController3.setInverted(false);
        //driveTrainSpeedController4 = new PWMVictorSPX(3);
        //LiveWindow.addActuator("DriveTrain", "Speed Controller 4", (PWMVictorSPX) driveTrainSpeedController4);
        //driveTrainSpeedController4.setInverted(false);
        driveTrainRobotDrive = new DifferentialDrive(driveTrainSpeedController1, driveTrainSpeedController2);
        //      driveTrainSpeedController3, driveTrainSpeedController4);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        //driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);

        driveTrainQuadratureEncoder1 = new Encoder(10, 11, true, EncodingType.k4X);//port 0 2*0+10=10, port 1 2*0+11=11
        LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 1", driveTrainQuadratureEncoder1);
        driveTrainQuadratureEncoder1.setDistancePerPulse(0.00390625);//1/Encoder ticks per revolution, which = 256
        driveTrainQuadratureEncoder1.setSamplesToAverage(1);
        driveTrainQuadratureEncoder1.setPIDSourceType(PIDSourceType.kRate);
        driveTrainQuadratureEncoder2 = new Encoder(12, 13, true, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 2", driveTrainQuadratureEncoder2);
        driveTrainQuadratureEncoder2.setDistancePerPulse(0.00390625);//1/Encoder ticks per revolution, which = 256
        driveTrainQuadratureEncoder2.setSamplesToAverage(1);
        driveTrainQuadratureEncoder2.setPIDSourceType(PIDSourceType.kRate);
        //driveTrainQuadratureEncoder3 = new Encoder(4, 5, true, EncodingType.k4X);
        //LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 3", driveTrainQuadratureEncoder3);
        //driveTrainQuadratureEncoder3.setDistancePerPulse(1.0);
        //driveTrainQuadratureEncoder3.setPIDSourceType(PIDSourceType.kRate);
        //driveTrainQuadratureEncoder4 = new Encoder(6, 7, true, EncodingType.k4X);
        //LiveWindow.addSensor("DriveTrain", "Quadrature Encoder 4", driveTrainQuadratureEncoder4);
        //driveTrainQuadratureEncoder4.setDistancePerPulse(1.0);
        //driveTrainQuadratureEncoder4.setPIDSourceType(PIDSourceType.kRate);
        driveTrainSolenoid1 = new Solenoid(0, 0);
        LiveWindow.addActuator("DriveTrain", "Solenoid 1", driveTrainSolenoid1);
        
        elevatorSpeedController1 = new WPI_VictorSPX(4);
        LiveWindow.addActuator("Elevator", "Speed Controller 1", (WPI_VictorSPX) elevatorSpeedController1);
        elevatorSpeedController1.setInverted(false);
        intakeSpeedController1 = new WPI_VictorSPX(5);
        LiveWindow.addActuator("Intake", "Speed Controller 1", (WPI_VictorSPX) intakeSpeedController1);
        intakeSpeedController1.setInverted(false);
        
        elevatorQuadratureEncoder1 = new Encoder(14,15,true, EncodingType.k4X);
        elevatorQuadratureEncoder1.setDistancePerPulse(1.0);
        elevatorQuadratureEncoder1.setPIDSourceType(PIDSourceType.kRate);
        
        elevatorDigitalInput1 = new DigitalInput(1);//TODO change '1'?, what does it mean?
        relay0=new Relay(0);
        relay1=new Relay(1);
        relay2=new Relay(2);
        relay0on = false;
        relay1on = false;
        relay2on = false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
